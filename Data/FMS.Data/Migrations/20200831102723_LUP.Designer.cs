// <auto-generated />
using System;
using FMS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FMS.Data.Migrations
{
    [DbContext(typeof(FMSDBContext))]
    [Migration("20200831102723_LUP")]
    partial class LUP
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FMS.Data.Models.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("FMS.Data.Models.Company.Company", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("Bulstat")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<int>("CompanyTypeID")
                        .HasColumnType("int");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.HasIndex("CompanyTypeID");

                    b.HasIndex("CountryID");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("FMS.Data.Models.Company.CompanyBoolProp", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<bool>("Value")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.ToTable("CompanyBoolProps");
                });

            modelBuilder.Entity("FMS.Data.Models.Company.CompanyNumericProp", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.ToTable("CompanyNumericProps");
                });

            modelBuilder.Entity("FMS.Data.Models.Company.CompanyStringProp", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.ToTable("CompanyStringProps");
                });

            modelBuilder.Entity("FMS.Data.Models.Company.CompanyType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("CompanyTypes");
                });

            modelBuilder.Entity("FMS.Data.Models.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("FMS.Data.Models.Document.Document", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("DocumentTypeID")
                        .HasColumnType("int");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DocumentTypeID");

                    b.HasIndex("RequestID");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("FMS.Data.Models.Document.DocumentBoolProp", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<bool>("Value")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("DocumentID");

                    b.ToTable("DocumentBoolProps");
                });

            modelBuilder.Entity("FMS.Data.Models.Document.DocumentNumericProp", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("DocumentID");

                    b.ToTable("DocumentNumericProps");
                });

            modelBuilder.Entity("FMS.Data.Models.Document.DocumentStringProp", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DocumentID");

                    b.ToTable("DocumentStringProps");
                });

            modelBuilder.Entity("FMS.Data.Models.Document.DocumentType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("FMS.Data.Models.Employee.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EGN")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("GenderID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("FMS.Data.Models.Employee.EmployeeBoolProp", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<bool>("Value")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("EmployeeBoolProps");
                });

            modelBuilder.Entity("FMS.Data.Models.Employee.EmployeeNumericProp", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("EmployeeNumericProps");
                });

            modelBuilder.Entity("FMS.Data.Models.Employee.EmployeeStringProp", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("EmployeeStringProps");
                });

            modelBuilder.Entity("FMS.Data.Models.Employee.Gender", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("FMS.Data.Models.Postcode", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Postcodes");
                });

            modelBuilder.Entity("FMS.Data.Models.Request.Load", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("PackageCount")
                        .HasColumnType("int");

                    b.Property<int>("PackageTypeID")
                        .HasColumnType("int");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PackageTypeID");

                    b.HasIndex("RequestID");

                    b.ToTable("Loads");
                });

            modelBuilder.Entity("FMS.Data.Models.Request.LoadNumericProps", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LoadID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("LoadID");

                    b.ToTable("LoadNumericProps");
                });

            modelBuilder.Entity("FMS.Data.Models.Request.LoadStringProp", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LoadID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LoadID");

                    b.ToTable("LoadStringProps");
                });

            modelBuilder.Entity("FMS.Data.Models.Request.LoadToLUPoint", b =>
                {
                    b.Property<int>("LoadID")
                        .HasColumnType("int");

                    b.Property<int>("LoadingUnloadingPointID")
                        .HasColumnType("int");

                    b.HasKey("LoadID", "LoadingUnloadingPointID");

                    b.HasIndex("LoadingUnloadingPointID");

                    b.ToTable("LoadToLUPoints");
                });

            modelBuilder.Entity("FMS.Data.Models.Request.LoadingUnloadingPoint", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostcodeID")
                        .HasColumnType("int");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<int>("SenderRecieverID")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.HasIndex("PostcodeID");

                    b.HasIndex("RequestID");

                    b.HasIndex("SenderRecieverID");

                    b.ToTable("LoadingUnloadingPoints");
                });

            modelBuilder.Entity("FMS.Data.Models.Request.PackageType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("PackageTypes");
                });

            modelBuilder.Entity("FMS.Data.Models.Request.Request", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestStatusID")
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RequestStatusID");

                    b.HasIndex("RequestTypeID");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("FMS.Data.Models.Request.RequestStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("RequestStatuses");
                });

            modelBuilder.Entity("FMS.Data.Models.Request.RequestStatusHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateChange")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewStatusID")
                        .HasColumnType("int");

                    b.Property<int>("OldStatusID")
                        .HasColumnType("int");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("NewStatusID");

                    b.HasIndex("OldStatusID");

                    b.HasIndex("RequestID");

                    b.ToTable("RequestStatusHistories");
                });

            modelBuilder.Entity("FMS.Data.Models.Request.RequestToCompany", b =>
                {
                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<int>("RequestToCompanyRelationTypeID")
                        .HasColumnType("int");

                    b.HasKey("RequestID", "CompanyID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("RequestToCompanyRelationTypeID");

                    b.ToTable("RequestToCompanies");
                });

            modelBuilder.Entity("FMS.Data.Models.Request.RequestToCompanyRelationType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("RequestToCompanyRelationTypes");
                });

            modelBuilder.Entity("FMS.Data.Models.Request.RequestToEmployee", b =>
                {
                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("RequestToEmployeeRelationTypeID")
                        .HasColumnType("int");

                    b.HasKey("RequestID", "EmployeeID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("RequestToEmployeeRelationTypeID");

                    b.ToTable("RequestToEmployees");
                });

            modelBuilder.Entity("FMS.Data.Models.Request.RequestToEmployeeRelationType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("RequestToEmployeeRelationTypes");
                });

            modelBuilder.Entity("FMS.Data.Models.Request.RequestType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("RequestTypes");
                });

            modelBuilder.Entity("FMS.Data.Models.City", b =>
                {
                    b.HasOne("FMS.Data.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Data.Models.Company.Company", b =>
                {
                    b.HasOne("FMS.Data.Models.City", "City")
                        .WithMany("Companies")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Data.Models.Company.CompanyType", "CompanyType")
                        .WithMany("Companies")
                        .HasForeignKey("CompanyTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Data.Models.Country", "Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Data.Models.Company.CompanyBoolProp", b =>
                {
                    b.HasOne("FMS.Data.Models.Company.Company", "Company")
                        .WithMany("CompanyBoolProps")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Data.Models.Company.CompanyNumericProp", b =>
                {
                    b.HasOne("FMS.Data.Models.Company.Company", "Company")
                        .WithMany("CompanyNumericProps")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Data.Models.Company.CompanyStringProp", b =>
                {
                    b.HasOne("FMS.Data.Models.Company.Company", "Company")
                        .WithMany("CompanyStringProps")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Data.Models.Document.Document", b =>
                {
                    b.HasOne("FMS.Data.Models.Document.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Data.Models.Request.Request", "Request")
                        .WithMany("Documents")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Data.Models.Document.DocumentBoolProp", b =>
                {
                    b.HasOne("FMS.Data.Models.Document.Document", "Document")
                        .WithMany("DocumentBoolProps")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Data.Models.Document.DocumentNumericProp", b =>
                {
                    b.HasOne("FMS.Data.Models.Document.Document", "Document")
                        .WithMany("DocumentNumericProps")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Data.Models.Document.DocumentStringProp", b =>
                {
                    b.HasOne("FMS.Data.Models.Document.Document", "Document")
                        .WithMany("DocumentStringProps")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Data.Models.Employee.Employee", b =>
                {
                    b.HasOne("FMS.Data.Models.Employee.Gender", "Gender")
                        .WithMany("Employees")
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Data.Models.Employee.EmployeeBoolProp", b =>
                {
                    b.HasOne("FMS.Data.Models.Employee.Employee", "Employee")
                        .WithMany("EmployeeBoolProps")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Data.Models.Employee.EmployeeNumericProp", b =>
                {
                    b.HasOne("FMS.Data.Models.Employee.Employee", "Employee")
                        .WithMany("EmployeeNumericProps")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Data.Models.Employee.EmployeeStringProp", b =>
                {
                    b.HasOne("FMS.Data.Models.Employee.Employee", "Employee")
                        .WithMany("EmployeeStringProps")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Data.Models.Postcode", b =>
                {
                    b.HasOne("FMS.Data.Models.City", "City")
                        .WithMany("Postcodes")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Data.Models.Request.Load", b =>
                {
                    b.HasOne("FMS.Data.Models.Request.PackageType", "PackageType")
                        .WithMany("Loads")
                        .HasForeignKey("PackageTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Data.Models.Request.Request", "Request")
                        .WithMany("Loads")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Data.Models.Request.LoadNumericProps", b =>
                {
                    b.HasOne("FMS.Data.Models.Request.Load", "Load")
                        .WithMany("LoadNumericProps")
                        .HasForeignKey("LoadID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Data.Models.Request.LoadStringProp", b =>
                {
                    b.HasOne("FMS.Data.Models.Request.Load", "Load")
                        .WithMany("LoadStringProps")
                        .HasForeignKey("LoadID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Data.Models.Request.LoadToLUPoint", b =>
                {
                    b.HasOne("FMS.Data.Models.Request.Load", "Load")
                        .WithMany("LoadToLUPoints")
                        .HasForeignKey("LoadID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Data.Models.Request.LoadingUnloadingPoint", "LoadingUnloadingPoint")
                        .WithMany("LoadToLUPoints")
                        .HasForeignKey("LoadingUnloadingPointID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Data.Models.Request.LoadingUnloadingPoint", b =>
                {
                    b.HasOne("FMS.Data.Models.City", "City")
                        .WithMany("LoadingUnloadingPoints")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Data.Models.Postcode", "Postcode")
                        .WithMany("LoadingUnloadingPoints")
                        .HasForeignKey("PostcodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Data.Models.Request.Request", "Request")
                        .WithMany("LoadingUnloadingPoints")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Data.Models.Company.Company", "SenderReciever")
                        .WithMany("LoadingUnloadingPoints")
                        .HasForeignKey("SenderRecieverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Data.Models.Request.Request", b =>
                {
                    b.HasOne("FMS.Data.Models.Request.RequestStatus", "RequestStatus")
                        .WithMany("Requests")
                        .HasForeignKey("RequestStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Data.Models.Request.RequestType", "RequestType")
                        .WithMany("Requests")
                        .HasForeignKey("RequestTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Data.Models.Request.RequestStatusHistory", b =>
                {
                    b.HasOne("FMS.Data.Models.Request.RequestStatus", "NewRequestStatus")
                        .WithMany("NewRequestStatusHistories")
                        .HasForeignKey("NewStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Data.Models.Request.RequestStatus", "OldRequestStatus")
                        .WithMany("OldRequestStatusHistories")
                        .HasForeignKey("OldStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Data.Models.Request.Request", "Request")
                        .WithMany("RequestStatusHistories")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Data.Models.Request.RequestToCompany", b =>
                {
                    b.HasOne("FMS.Data.Models.Company.Company", "Company")
                        .WithMany("RequestToCompanies")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Data.Models.Request.Request", "Request")
                        .WithMany("RequestToCompanies")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Data.Models.Request.RequestToCompanyRelationType", "RequestToCompanyRelationType")
                        .WithMany("RequestToCompanies")
                        .HasForeignKey("RequestToCompanyRelationTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Data.Models.Request.RequestToEmployee", b =>
                {
                    b.HasOne("FMS.Data.Models.Employee.Employee", "Employee")
                        .WithMany("RequestToEmployees")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Data.Models.Request.Request", "Request")
                        .WithMany("RequestToEmployees")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Data.Models.Request.RequestToEmployeeRelationType", "RequestToEmployeeRelationType")
                        .WithMany("RequestToEmployees")
                        .HasForeignKey("RequestToEmployeeRelationTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
